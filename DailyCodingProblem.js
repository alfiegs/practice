
//###############################################################################################
//###############################################################################################
//###############################################################################################
//###############################################################################################
//###############################################################################################
//###############################################################################################
//###############################################################################################
//###############################################################################################
//###############################################################################################
//###############################################################################################
// 8/23/19
// Given a list of numbers and a number k, return whether any two numbers from the list add up to k.
// For example, given [10, 15, 3, 7] and k of 17, return true since 10 + 7 is 17.
//------------------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------------------

var nums = [50, 7, 1, 2, 3, 4, 5, 6, 7];
var k = 57;
var sums = []

//add each number in nums to every other number in nums and add the sum to the array sums 
nums.forEach((element)=>{ //for every item in array nums
    for(i=0; i<nums.length; i++){
    sums.push(element + nums[i]) //for every item at every index of nums, add it to the nums item represented by element and push it to sums array
    }
})

// console.log(sums)

//if the array sums includes k, print true
if(sums.includes(k)){
    console.log(true)
}
//------------------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------------------
//###############################################################################################
//###############################################################################################
//###############################################################################################
//###############################################################################################
//###############################################################################################
//###############################################################################################
//###############################################################################################
//###############################################################################################
//###############################################################################################
//###############################################################################################
//8/27/19
// cons(a, b) constructs a pair, and car(pair) and cdr(pair) returns the first and last element of that pair. For example, car(cons(3, 4)) returns 3, and cdr(cons(3, 4)) returns 4.

// Given this implementation of cons:

// def cons(a, b):
//     def pair(f):
//         return f(a, b)
//     return pair
// Implement car and cdr.